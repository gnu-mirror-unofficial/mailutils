@c snarfed from mu_message.c:180
@deffn {Scheme Procedure} mu-message? scm
Return @code{true} if @var{scm} is a Mailutils message.
@end deffn

@c snarfed from mu_message.c:189
@deffn {Scheme Procedure} mu-message-create
Creates an empty message.
@end deffn

@c snarfed from mu_message.c:201
@deffn {Scheme Procedure} mu-message-copy mesg
Creates a copy of the message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:246
@deffn {Scheme Procedure} mu-message-destroy mesg
Destroys the message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:263
@deffn {Scheme Procedure} mu-message-set-header mesg header value [replace]
Sets header @var{header} of the message @var{mesg} to new @var{value}.
If @var{header} is already present in the message, its value
is replaced with the suplied one iff the optional @var{replace} is
@code{#t}. Otherwise, a new header is created and appended.
@end deffn

@c snarfed from mu_message.c:310
@deffn {Scheme Procedure} mu-message-get-size mesg
Returns size of the message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:325
@deffn {Scheme Procedure} mu-message-get-lines mesg
Returns number of lines in the message @var{msg}.
@end deffn

@c snarfed from mu_message.c:368
@deffn {Scheme Procedure} mu-message-get-envelope mesg
Returns envelope of the message @var{mesg}.
The value returned is the envelope line without the "From " prefix.
@end deffn

@c snarfed from mu_message.c:403
@deffn {Scheme Procedure} mu-message-get-envelope-date mesg
Returns envelope date of the message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:433
@deffn {Scheme Procedure} mu-message-get-sender mesg
Returns email address of the sender of the message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:463
@deffn {Scheme Procedure} mu-message-get-header mesg header
Returns value of the header @var{header} from the message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:527
@deffn {Scheme Procedure} mu-message-get-header-fields mesg [headers]
Returns list of headers in the message @var{mesg}. optional argument
@var{headers} gives a list of header names to restrict return value to.
@end deffn

@c snarfed from mu_message.c:594
@deffn {Scheme Procedure} mu-message-set-header-fields mesg list [replace]
Set headers in the message @var{mesg} to those listed in @var{list},
which is a list of conses @code{(cons @var{header} @var{value})}.

Optional parameter @var{replace} specifies whether new header
values should replace the headers already present in the
message.
@end deffn

@c snarfed from mu_message.c:650
@deffn {Scheme Procedure} mu-message-delete mesg [flag]
Mark message @var{mesg} as deleted. Optional argument @var{flag} allows to
toggle the deletion mark. The message is deleted if it is @code{#t} and
undeleted if it is @code{#f}.
@end deffn

@c snarfed from mu_message.c:685
@deffn {Scheme Procedure} mu-message-get-flag mesg flag
Return the value of the attribute @var{flag} of the message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:747
@deffn {Scheme Procedure} mu-message-set-flag mesg flag [value]
Set the attribute @var{flag} in message @var{mesg}. If optional @var{value}
is @samp{#f}, the attribute is unset.
@end deffn

@c snarfed from mu_message.c:844
@deffn {Scheme Procedure} mu-message-get-user-flag mesg flag
Return value of the user-defined attribute @var{flag} from the message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:867
@deffn {Scheme Procedure} mu-message-set-user-flag mesg flag [value]
Set user-defined attribute @var{flag} in the message @var{mesg}.
If optional argumen @var{value} is @samp{#f}, the attribute is unset.
@end deffn

@c snarfed from mu_message.c:905
@deffn {Scheme Procedure} mu-message-get-port mesg mode [full]
Returns a port associated with the message @var{mesg}. The @var{mode} is a
string defining operation mode of the stream. It may contain any of the
two characters: @samp{r} for reading, @samp{w} for writing.
If optional boolean argument @var{full} is @samp{#t} then the returned port
will allow access to any part of the message (including headers). Otherwise
the port accesses only the message body (the default).

@end deffn

@c snarfed from mu_message.c:955
@deffn {Scheme Procedure} mu-message-get-body mesg
Returns message body for the message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:973
@deffn {Scheme Procedure} mu-message-multipart? mesg
Returns @code{#t} if @var{mesg} is a multipart @acronym{MIME} message.
@end deffn

@c snarfed from mu_message.c:989
@deffn {Scheme Procedure} mu-message-get-num-parts mesg
Returns number of parts in a multipart @acronym{MIME} message @var{mesg}.
Returns @code{#f} if the argument is not a multipart message.
@end deffn

@c snarfed from mu_message.c:1014
@deffn {Scheme Procedure} mu-message-get-part mesg part
Returns part #@var{part} of a multipart @acronym{MIME} message @var{mesg}.
@end deffn

@c snarfed from mu_message.c:1043
@deffn {Scheme Procedure} mu-message-send mesg [mailer [from [to]]]
Sends message @var{mesg}. Optional @var{mailer} overrides default mailer
settings. Optional @var{from} and @var{to} give sender and receiver
addresses, respectively.
@end deffn

@c snarfed from mu_message.c:1125
@deffn {Scheme Procedure} mu-message-get-uid mesg
Returns UID of the message @var{mesg}
@end deffn

@c snarfed from mu_message.c:1143
@deffn {Scheme Procedure} mu-message-from-port port
Reads one message from @var{port} and returns it.
@end deffn
