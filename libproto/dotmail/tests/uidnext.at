# GNU Mailutils -- a suite of utilities for electronic mail
# Copyright (C) 2019-2020 Free Software Foundation, Inc.
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with GNU Mailutils.  If not, see <http://www.gnu.org/licenses/>.

AT_SETUP([UID monotonicity])
AT_DATA([inbox],
[Received: (from hare@wonder.land) 
	by wonder.land id 3301
	for alice@wonder.land; Mon, 29 Jul 2002 22:00:06 +0100
Date: Mon, 29 Jul 2002 22:00:01 +0100
From: March Hare  <hare@wonder.land>
Message-Id: <200207292200.3301@wonder.land>
To: Alice  <alice@wonder.land>
Subject: Invitation
Return-Path: hare@wonder.land
Status: O
X-UID: 10
X-IMAPbase: 10 1001

Have some wine
.
Received: (from alice@wonder.land)
	by wonder.land id 3302
	for hare@wonder.land; Mon, 29 Jul 2002 22:00:07 +0100
Date: Mon, 29 Jul 2002 22:00:02 +0100
From: Alice  <alice@wonder.land>
Message-Id: <200207292200.3302@wonder.land>
To: March Hare  <hare@wonder.land>
Subject: Re: Invitation
Return-Path: alice@wonder.land
X-UID: 11

I don't see any wine
.
])

# Test initial mailbox status
AT_CHECK([mbop -m inbox count \; uidnext \; uidvalidity],
[0],
[count: 2
uidnext: 1001
uidvalidity: 10
])

# Prepare the message to append.
AT_DATA([msg1],
[Received: (from hare@wonder.land)
	by wonder.land id 3303
	for alice@wonder.land; Mon, 29 Jul 2002 22:00:08 +0100
Date: Mon, 29 Jul 2002 22:00:03 +0100
From: March Hare  <hare@wonder.land>
Message-Id: <200207292200.3303@wonder.land>
To: Alice  <alice@wonder.land>
Subject: Re: Invitation
Return-Path: hare@wonder.land

There isn't any
])

# Append message; check mailbox status
AT_CHECK([mbop -m inbox append msg1 \; 3 \; uid \; uidnext \; uidvalidity],
[0],
[append: OK
3 current message
3 uid: 1001
uidnext: 1002
uidvalidity: 10
])

# Test mailbox status after close.
AT_CHECK([mbop -m inbox count \; uidnext \; uidvalidity],
[0],
[count: 3
uidnext: 1002
uidvalidity: 10
])

# Delete the message
AT_CHECK([mbop -m inbox 3 \; set_deleted \; expunge],
[0],
[3 current message
3 set_deleted: OK
expunge: OK
])

# Test mailbox status after delete
AT_CHECK([mbop -m inbox count \; uidnext \; uidvalidity],
[0],
[count: 2
uidnext: 1002
uidvalidity: 10
])

# Append the message again and check status
AT_CHECK([mbop -m inbox append msg1 \; 3 \; uid \; uidnext \; uidvalidity],
[0],
[append: OK
3 current message
3 uid: 1002
uidnext: 1003
uidvalidity: 10
])

# Test mailbox status after append
AT_CHECK([mbop -m inbox count \; uidnext \; uidvalidity],
[0],
[count: 3
uidnext: 1003
uidvalidity: 10
])

# Retry all in one session.
AT_DATA([cmd],
[3
set_deleted
expunge
uidnext
uidvalidity
append msg1
3
uid
uidnext
uidvalidity
])

AT_CHECK([mbop -m inbox < cmd],
[0],
[3 current message
3 set_deleted: OK
expunge: OK
uidnext: 1003
uidvalidity: 10
append: OK
3 current message
3 uid: 1003
uidnext: 1004
uidvalidity: 10
])

AT_CLEANUP

